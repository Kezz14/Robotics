package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

@TeleOp(name="DriveTest", group="Linear OpMode")
public class DriveTest extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor BackleftDrive = null;
    private DcMotor BackrightDrive = null;
    private DcMotor FrontleftDrive = null;
    private DcMotor FrontrightDrive = null;

    private double driveSpeed = 0.0;  // Initial speed
    private boolean dpadUpPressed = false;  // Track if DPad Up has been pressed
    private boolean dpadDownPressed = false;  // Track if DPad Down has been pressed
    private long lastUpPressTime = 0;  // Track time of last DPad Up press
    private long lastDownPressTime = 0;  // Track time of last DPad Down press

    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        // Initialize the hardware variables.
        BackleftDrive = hardwareMap.get(DcMotor.class, "leftBack");
        BackrightDrive = hardwareMap.get(DcMotor.class, "rightBack");
        FrontleftDrive = hardwareMap.get(DcMotor.class, "leftFront");
        FrontrightDrive = hardwareMap.get(DcMotor.class, "rightFront");

        // Reverse the direction of the back motors (assuming they need to be reversed).
        BackleftDrive.setDirection(DcMotor.Direction.REVERSE);
        BackrightDrive.setDirection(DcMotor.Direction.FORWARD);
        FrontleftDrive.setDirection(DcMotor.Direction.REVERSE);
        FrontrightDrive.setDirection(DcMotor.Direction.FORWARD);

        // Wait for the game to start (driver presses START)
        waitForStart();
        runtime.reset();

        // Run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            // Check if DPad Up is pressed and was not pressed previously (debouncing)
            if (gamepad1.dpad_up && !dpadUpPressed && (System.currentTimeMillis() - lastUpPressTime) > 500) {
                driveSpeed += 0.05;  // Increase speed by 0.05
                lastUpPressTime = System.currentTimeMillis();  // Update last press time
                dpadUpPressed = true;  // Mark that DPad Up was pressed
                // Pause for 500 milliseconds (0.5 seconds) to slow down speed increases
                try {
                    Thread.sleep(500);  // Sleep for 500ms (0.5 seconds)
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else if (!gamepad1.dpad_up) {
                // Reset DPad up pressed state when the button is released
                dpadUpPressed = false;
            }

            // Check if DPad Down is pressed and was not pressed previously (debouncing)
            if (gamepad1.dpad_down && !dpadDownPressed && (System.currentTimeMillis() - lastDownPressTime) > 500) {
                driveSpeed -= 0.05;  // Decrease speed by 0.05
                lastDownPressTime = System.currentTimeMillis();  // Update last press time
                dpadDownPressed = true;  // Mark that DPad Down was pressed
                // Pause for 500 milliseconds (0.5 seconds) to slow down speed decreases
                try {
                    Thread.sleep(500);  // Sleep for 500ms (0.5 seconds)
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else if (!gamepad1.dpad_down) {
                // Reset DPad down pressed state when the button is released
                dpadDownPressed = false;
            }

            // Clamp the driveSpeed to be within the range [-1.0, 1.0]
            driveSpeed = Range.clip(driveSpeed, -1.0, 1.0);

            // POV Mode uses left stick to go forward, and right stick to turn.
            double drive = -gamepad1.left_stick_y;
            double turn  = gamepad1.right_stick_x;

            // Compute the motor power for each wheel
            double frontLeftPower = Range.clip(drive + turn + driveSpeed, -1.0, 1.0);
            double frontRightPower = Range.clip(drive - turn + driveSpeed, -1.0, 1.0);
            double backLeftPower = Range.clip(drive + turn + driveSpeed, -1.0, 1.0);
            double backRightPower = Range.clip(drive - turn + driveSpeed, -1.0, 1.0);

            // Send calculated power to each wheel
            FrontleftDrive.setPower(frontLeftPower);
            FrontrightDrive.setPower(frontRightPower);
            BackleftDrive.setPower(backLeftPower);
            BackrightDrive.setPower(backRightPower);

            // Show the elapsed game time and wheel power.
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Drive Speed", "Current Speed: %.2f", driveSpeed);
            telemetry.addData("Motors", "frontLeft (%.2f), frontRight (%.2f), backLeft (%.2f), backRight (%.2f)",
                    frontLeftPower, frontRightPower, backLeftPower, backRightPower);
            telemetry.update();
        }
    }
}
